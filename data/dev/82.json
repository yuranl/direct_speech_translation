{"wav_id": "82", "speaker": "82", "offset": "6.600", "duration": "0.550", "wav": "82.wav", "translation": "Hi!", "transcript": "大家好！"}
{"wav_id": "82", "speaker": "82", "offset": "7.530", "duration": "2.380", "wav": "82.wav", "translation": "I am Yi Guolei, an engineer from Baidu.", "transcript": "我是来自百度的工程师衣国垒。"}
{"wav_id": "82", "speaker": "82", "offset": "10.400", "duration": "7.490", "wav": "82.wav", "translation": "Today we will talk about Elasticsearch, an open source software, and its application in Baidu.", "transcript": "今天由我给大家来介绍一下Elasticsearch这个开源的软件，以及它在百度的一些使用情况。"}
{"wav_id": "82", "speaker": "82", "offset": "18.640", "duration": "7.620", "wav": "82.wav", "translation": "There are three parts for this session today, including the concepts and rationale of Elasticsearch, some typical usage scenarios of it.", "transcript": "今天我主要围绕三个部分来介绍一下，Elasticsearch的概念和基本原理，它的一些典型使用场景。"}
{"wav_id": "82", "speaker": "82", "offset": "26.380", "duration": "3.580", "wav": "82.wav", "translation": "As well as some improvements made by Baidu in its use of Elasticsearch.", "transcript": "以及百度在使用Elasticsearch过程中对它的一些改进。"}
{"wav_id": "82", "speaker": "82", "offset": "30.670", "duration": "4.860", "wav": "82.wav", "translation": "Let's first look at the concept and rationale of Elasticsearch.", "transcript": "首先我们来看一下Elasticsearch的概念和基本原理。"}
{"wav_id": "82", "speaker": "82", "offset": "36.940", "duration": "3.720", "wav": "82.wav", "translation": "Elasticsearch is a distributed search engine based on Lucene.", "transcript": "Elasticsearch是一个基于Lucene的分布式检索引擎。"}
{"wav_id": "82", "speaker": "82", "offset": "41.120", "duration": "4.640", "wav": "82.wav", "translation": "Lucene is a common open source document retrieval engine that you may be familiar with.", "transcript": "Lucene是大家可能都比较熟悉的一个开源的文档检索引擎。"}
{"wav_id": "82", "speaker": "82", "offset": "46.120", "duration": "6.190", "wav": "82.wav", "translation": "Many companies are using Lucene for documents or web search and analysis.", "transcript": "现在很多公司都在使用Lucene做一些文档或者网页的检索与分析的工作。"}
{"wav_id": "82", "speaker": "82", "offset": "52.680", "duration": "5.180", "wav": "82.wav", "translation": "Elasticsearch is built on Lucene, so it also has full-text search capabilities.", "transcript": "Elasticsearch是基于Lucene来构建，所以它天然呢就能够做一些全文检索类的工作。"}
{"wav_id": "82", "speaker": "82", "offset": "58.460", "duration": "8.010", "wav": "82.wav", "translation": "At the same time, Elasticsearch builds a layer of distributed indexes on top of Lucene, so it can expand to many nodes.", "transcript": "同时Elasticsearch在Lucene之上构建了一层分布式的索引，所以呢Elasticsearch能够扩展到很多个节点。"}
{"wav_id": "82", "speaker": "82", "offset": "67.740", "duration": "5.140", "wav": "82.wav", "translation": "From our usage scenario, it can be extended to hundreds of nodes, supporting petabytes of data.", "transcript": "从我们的使用场景来看呢，大约能扩展到上百个节点，支持PB级别的数据。"}
{"wav_id": "82", "speaker": "82", "offset": "73.550", "duration": "9.150", "wav": "82.wav", "translation": "In 2010, the first version of Elasticsearch was launched, with version 1.0 released in 2012.", "transcript": "Elasticsearch的第一个版本发发布于201 2010年，然后在2012年紧接着发布了1.0的版本。"}
{"wav_id": "82", "speaker": "82", "offset": "83.070", "duration": "3.530", "wav": "82.wav", "translation": "Version 6.0 was released in 2017.", "transcript": "然后今年17年发布了一 6.0版本。"}
{"wav_id": "82", "speaker": "82", "offset": "86.980", "duration": "4.670", "wav": "82.wav", "translation": "Judging from its release speed, Elasticsearch is a popular open-source software.", "transcript": "从版本的发布速度上来看呢,Elasticsearch还是一个非常火的开源软件。"}
{"wav_id": "82", "speaker": "82", "offset": "93.180", "duration": "5.700", "wav": "82.wav", "translation": "Elastic was founded in 2012, greatly accelerating the development of Elasticsearch.", "transcript": "在2012年成立了Elastic公司，大大加速了Elasticsearch的发展。"}
{"wav_id": "82", "speaker": "82", "offset": "100.550", "duration": "5.650", "wav": "82.wav", "translation": "Elasticsearch has deployed with over 70 businesses across Baidu with over 400 physical computers.", "transcript": "Elasticsearch在百度，大约我们部署了70多个业务，400多台物理机。"}
{"wav_id": "82", "speaker": "82", "offset": "106.440", "duration": "1.410", "wav": "82.wav", "translation": "The business scope is wide.", "transcript": "业务也是非常广泛的。"}
{"wav_id": "82", "speaker": "82", "offset": "108.310", "duration": "9.290", "wav": "82.wav", "translation": "Baidu WangMeng, Nuomi and Du Xiaoman Financial are all using Elasticsearch for log analysis and retrieval.", "transcript": "大家熟知的像网盟、糯米、还有百度金融都在使用Elasticsearch来做一些日志分析，或者说一些检索类的工作。"}
{"wav_id": "82", "speaker": "82", "offset": "119.330", "duration": "15.190", "wav": "82.wav", "translation": "Elasticsearch has not only been widely used in Baidu, but also beyond Baidu such as GitHub, Stackoverflow, Uber and Facebook, which our R & D personnel are quite familiar with.", "transcript": "Elasticsearch不仅在百度大的使用，从我们呃使用来看，Elasticsearch在购在百度外部也被大量地使用，像我们研发人员比较熟悉的GitHub还有Stackoverflow、Uber、Facebook等都大量地使用。"}
{"wav_id": "82", "speaker": "82", "offset": "135.040", "duration": "8.810", "wav": "82.wav", "translation": "GitHub uses Elasticsearch for its repo and source code management, as well as some audit log analysis and inquiry.", "transcript": "像GitHub就使用Elasticsearch来做它一些它的repo和源代码的管理，以及一些审计日志的分析和查询的工作。"}
{"wav_id": "82", "speaker": "82", "offset": "144.180", "duration": "2.070", "wav": "82.wav", "translation": "It stores about 30T of data.", "transcript": "大约存储了30多T的数据。"}
{"wav_id": "82", "speaker": "82", "offset": "146.870", "duration": "12.590", "wav": "82.wav", "translation": "In its January database rankings, Elasticsearch ranks 11th, beating good traditional databases such as HBase and MariaDB.", "transcript": "在今年1月份数据库的排名中，Elasticsearch排名第11名，超过了我们平时所熟悉的像HBase，哈还有MariaDB这些传统的非常好的一些数据库。"}
{"wav_id": "82", "speaker": "82", "offset": "160.840", "duration": "4.530", "wav": "82.wav", "translation": "Judging from this ranking, Elasticsearch is popular  among customers.", "transcript": "所以从这个排名上来看，Elasticsearch也是受广大用户非常欢迎的。"}
{"wav_id": "82", "speaker": "82", "offset": "166.510", "duration": "8.050", "wav": "82.wav", "translation": "There are five key concepts of Elasticsearch, including Index, Shard, Document, Type and Field.", "transcript": "Elasticsearch的核心概念主要有五个，像Index、Shard、Document、Type和Field。"}
{"wav_id": "82", "speaker": "82", "offset": "175.910", "duration": "5.050", "wav": "82.wav", "translation": "Index is a collection of documents, similar to Database.", "transcript": "Index就是一堆文档的集合，类似于我们数据库中的Database这个概念。"}
{"wav_id": "82", "speaker": "82", "offset": "181.190", "duration": "7.830", "wav": "82.wav", "translation": "Shard groups all documents by ID, where Hash grouping is used.", "transcript": "Shard就是把把一些把所有的文档按照它的ID来进行分组，分组的方式就是哈希的分组。"}
{"wav_id": "82", "speaker": "82", "offset": "190.630", "duration": "4.950", "wav": "82.wav", "translation": "The document in Elasticsearch is json document, as is known to all of you.", "transcript": "Elasticsearch中的文档就是一个json的文档，可能大家都比较熟悉了。"}
{"wav_id": "82", "speaker": "82", "offset": "196.020", "duration": "8.550", "wav": "82.wav", "translation": "A Field in Elasticsearch—every field in a json document is called a \"Field\"—is similar to a Column in a database table.", "transcript": "而Elasticsearch中Field就是json文档中的每一个字段都叫做一个Field，它类似于我们数据库表中的Column这个概念。"}
{"wav_id": "82", "speaker": "82", "offset": "205.060", "duration": "2.870", "wav": "82.wav", "translation": "Type is a logical partition in the Index.", "transcript": "Type是在Index上做一个逻辑的分区。"}
{"wav_id": "82", "speaker": "82", "offset": "209.290", "duration": "8.830", "wav": "82.wav", "translation": "It means that there may be multiple types of documents in the Index, and each document has a Type, and a Type contains many Fields.", "transcript": "它表达的是说，一个Index中可能有多种类型的文档，每一种类型的文档就有一个Type，一个Type包含了很多Field。"}
{"wav_id": "82", "speaker": "82", "offset": "220.900", "duration": "3.940", "wav": "82.wav", "translation": "What is Index, then?", "transcript": "下面我们来看一下Index，到底是什么是Index？"}
{"wav_id": "82", "speaker": "82", "offset": "225.250", "duration": "5.770", "wav": "82.wav", "translation": "Elasticsearch offers REST API to all outside API and is very developer friendly.", "transcript": "Elasticsearch提供给外部的API都是REST 的API，对广大开发者都非常友好的。"}
{"wav_id": "82", "speaker": "82", "offset": "231.450", "duration": "11.610", "wav": "82.wav", "translation": "If you want to create a document with three shards and two copies, the Index of test is divided into three parts, each with two copies.", "transcript": "像这里我们要创建一个具有三个分片、两个副本的文档，我们可以看到test的这个Index它就被分成了三份儿，每一份儿都有两个副本。"}
{"wav_id": "82", "speaker": "82", "offset": "243.300", "duration": "4.060", "wav": "82.wav", "translation": "The Shard for test1 is stored on Node1 and Node4.", "transcript": "像test1这个Shard它就被存储在Node1和Node4上。"}
{"wav_id": "82", "speaker": "82", "offset": "247.750", "duration": "8.790", "wav": "82.wav", "translation": "When storing a document on Index, we pass Elasticsearch a json document via the REST API.", "transcript": "当我们要向这个Index中存储一份文档的时候，我们也是通过json通过REST这种API来传一个json文档给Elasticsearch。"}
{"wav_id": "82", "speaker": "82", "offset": "256.920", "duration": "4.960", "wav": "82.wav", "translation": "For example, the name is yiguolei and the age is 29.", "transcript": "像我们现在要传递的文档，它的比如name是yiguolei，age是29的时候。"}
{"wav_id": "82", "speaker": "82", "offset": "262.180", "duration": "2.070", "wav": "82.wav", "translation": "It simply does a Hash grouping with this ID.", "transcript": "它就按照它的ID做一次哈希。"}
{"wav_id": "82", "speaker": "82", "offset": "264.370", "duration": "11.300", "wav": "82.wav", "translation": "Assuming the result is 1, it is stored on the Shard 1, and Elasticsearch will automatically enter this document into the two physical nodes of Node1 and Node4 for storage.", "transcript": "假设我们哈希完之后的结果是1，那么它就被存储在1这个Shard上，然后Elasticsearch会自动把这个文档录入到Node1和Node4两个物理节点上进行存储。"}
{"wav_id": "82", "speaker": "82", "offset": "277.250", "duration": "5.180", "wav": "82.wav", "translation": "When  we make the query, the query statement is also expressed in json.", "transcript": "当我们要进行查询的时候，我们的查询语句同样也是用用json方式来表达的。"}
{"wav_id": "82", "speaker": "82", "offset": "282.710", "duration": "16.130", "wav": "82.wav", "translation": "If you want to find information about anyone aged 29, Elasticsearch will distribute retrieval requests to all of the physical nodes because it does know what node to begin with for the retrieval.", "transcript": "像在这里我们就要查询他的年龄等于29的所有的人，把他的信息给检索出来，在检索的时候Elasticsearch并不知道具体地从哪一个节点上来进行检索，它是把检索请求分分发到所有的物理节点上进行检索。"}
{"wav_id": "82", "speaker": "82", "offset": "298.850", "duration": "4.480", "wav": "82.wav", "translation": "Then it gathers them on a single Client node and returns them to the user.", "transcript": "然后在统一的Client节点上进行汇聚，然后返回给用户。"}
{"wav_id": "82", "speaker": "82", "offset": "305.010", "duration": "4.410", "wav": "82.wav", "translation": "From the point of view of ecosystem, Elasticsearch is already compatible with many ecosystems.", "transcript": "从生态的角度来看，Elasticsearch已经兼容了很很多很多生态。"}
{"wav_id": "82", "speaker": "82", "offset": "309.450", "duration": "5.780", "wav": "82.wav", "translation": "For example, the data of traditional databases such as MySQL and Oracle can be imported to Elasticsearch.", "transcript": "包括我们传统的像我们的数据库，像MySQL、Oracle它的数据都可以导入到Elasticsearch中。"}
{"wav_id": "82", "speaker": "82", "offset": "315.620", "duration": "3.910", "wav": "82.wav", "translation": "The ecosystem of the new Hadoop is also compatible with Elasticsearch.", "transcript": "还有新兴的像Hadoop生态都可以与Ela  Elasticsearch打通。"}
{"wav_id": "82", "speaker": "82", "offset": "319.850", "duration": "5.240", "wav": "82.wav", "translation": "It offers a unified json query mode for users to use.", "transcript": "然后对外部提供一个统一的json的查询方式，提供给用户来使用。"}
{"wav_id": "82", "speaker": "82", "offset": "326.880", "duration": "6.160", "wav": "82.wav", "translation": "Let us move on to some typical application scenarios of Elasticsearch for your choice.", "transcript": "第二部分我来介绍一下Elasticsearch一些典型使用场景，供大家来使使用的时候做选择。"}
{"wav_id": "82", "speaker": "82", "offset": "334.980", "duration": "2.900", "wav": "82.wav", "translation": "The first one is log analysis service.", "transcript": "第一个典型的使用场景是日志分析类的服务。"}
{"wav_id": "82", "speaker": "82", "offset": "338.150", "duration": "6.940", "wav": "82.wav", "translation": "Imagine a company with thousands of servers, each printing a large number of logs.", "transcript": "我们可以设想一个场景，就是我们公司有很多服务器，比如说上千台，每台服务器都打印了大量的日志。"}
{"wav_id": "82", "speaker": "82", "offset": "345.380", "duration": "6.270", "wav": "82.wav", "translation": "When retrieving logs containing rpc timeout or ERROR.", "transcript": "当我们要检索说在日志出现过rpc timeout或者ERROR这样的日志的时候。"}
{"wav_id": "82", "speaker": "82", "offset": "352.730", "duration": "12.880", "wav": "82.wav", "translation": "The traditional approach is to write some grep scripts, distribute it on various physical machines or transfer logs to HDFS for analysis by SPARK or MapReduce.", "transcript": "我们传统的做法是写一些grep的脚本，从各个物理机上来分布式的grep，或者说我们把很多日志传输传输到HDFS上，然后通过SPARK或MapReduce来进行分析。"}
{"wav_id": "82", "speaker": "82", "offset": "366.210", "duration": "6.340", "wav": "82.wav", "translation": "In the first case, scripting is complex and grep is inefficient.", "transcript": "第一种方式呢就是说你写起这个脚本写写起来会比较复杂，另外grep的效率会比较低。"}
{"wav_id": "82", "speaker": "82", "offset": "372.860", "duration": "6.540", "wav": "82.wav", "translation": "HDFS takes a lot of time to transmit, with poor timeliness.", "transcript": "第二种式方式呢，通过HDFS的这种方式，就是传输的过程中时间可能比较久，时效性不好。"}
{"wav_id": "82", "speaker": "82", "offset": "379.670", "duration": "4.110", "wav": "82.wav", "translation": "The analysis efficiency of MapReduce is low.", "transcript": "另外一个MapReduce来做进行分析，它的效率也是比较低的。"}
{"wav_id": "82", "speaker": "82", "offset": "383.800", "duration": "2.480", "wav": "82.wav", "translation": "Analyzing an error can take several minutes.", "transcript": "可能你分析一个错误就需要几分钟的时间。"}
{"wav_id": "82", "speaker": "82", "offset": "388.300", "duration": "5.820", "wav": "82.wav", "translation": "Elasticsearch can accelerate this process considerably.", "transcript": "而在使在我们使用了Elasticsearch之后呢,我们可以更大大加速这种过程。"}
{"wav_id": "82", "speaker": "82", "offset": "394.200", "duration": "2.950", "wav": "82.wav", "translation": "Elasticsearch has a very popular set of architecture in the community.", "transcript": "Elasticsearch 在社区内非常火的一套架构。"}
{"wav_id": "82", "speaker": "82", "offset": "397.160", "duration": "1.160", "wav": "82.wav", "translation": "ELK architecture.", "transcript": "就是ELK架构。"}
{"wav_id": "82", "speaker": "82", "offset": "398.600", "duration": "2.530", "wav": "82.wav", "translation": "E means Elasticsearch, used for storing index.", "transcript": "E就是Elasticsearch它用来存储索引。"}
{"wav_id": "82", "speaker": "82", "offset": "401.680", "duration": "8.280", "wav": "82.wav", "translation": "L refers to Logstash, responsible for getting data from each physical machine and store it in Elasticsearch.", "transcript": "L就Logstash，Logstash就要负责从各个物理机上把数据进行拉取，然后存储到Elasticsearch中。"}
{"wav_id": "82", "speaker": "82", "offset": "410.320", "duration": "2.810", "wav": "82.wav", "translation": "Elasticsearch indexes these logs.", "transcript": "Elasticsearch对这些日志做索引。"}
{"wav_id": "82", "speaker": "82", "offset": "413.350", "duration": "3.730", "wav": "82.wav", "translation": "K refers to Kibana, mainly used for visual analysis.", "transcript": "K K就是指的Kibana，主要用来做可视化分析的。"}
{"wav_id": "82", "speaker": "82", "offset": "418.430", "duration": "11.550", "wav": "82.wav", "translation": "Users can write any search criteria, and Kibana can retrieve any log that matches the criteria and present a visual report.", "transcript": "通过Kibana上用户可以任意地写他们的检索条件，然后Kibana可以把符合检索条件的日志全都检索出来，然后再以可视化报表的方式展示给用户。"}
{"wav_id": "82", "speaker": "82", "offset": "431.950", "duration": "4.490", "wav": "82.wav", "translation": "The second scenario is a secondary indexing.", "transcript": "第二种典型的使用场景是二级索引这种使用场景。"}
{"wav_id": "82", "speaker": "82", "offset": "437.640", "duration": "7.870", "wav": "82.wav", "translation": "Secondary indexing mainly serves traditional databases, such as MySQL and Oracle, as well as the very popular NoSQL databases such as HBase.", "transcript": "二级索引主要服务于像我们传统数据库，像MySQL、Oracle，也可以服务于现在非常火的NoSQL数据库，像HBase。"}
{"wav_id": "82", "speaker": "82", "offset": "447.070", "duration": "6.930", "wav": "82.wav", "translation": "Users mainly use Elasticsearch because MySQL and HBase have poor indexing capabilities.", "transcript": "用户用H用Elasticsearch的主要原因是因为，像MySQL和HBase，其实它们的索引能力都比较差。"}
{"wav_id": "82", "speaker": "82", "offset": "454.250", "duration": "8.040", "wav": "82.wav", "translation": "If a table has more than ten index fields, MySQL is very inefficient when inserting it.", "transcript": "像MySQL如果一个表你建的索引字段超过十个的话，其实你在插入的时候效率是非常低的。"}
{"wav_id": "82", "speaker": "82", "offset": "462.750", "duration": "4.110", "wav": "82.wav", "translation": "Moreover, when the amount of data is large, MySQL needs sharding.", "transcript": "而且一数据量非常大的时候，MySQL就要做分库分表的方案。"}
{"wav_id": "82", "speaker": "82", "offset": "467.940", "duration": "6.260", "wav": "82.wav", "translation": "After that, MySQL had weak support for MPP when users search.", "transcript": "在分库分表之后，用户在做检索的时候，MySQL对MPP的支持又是比较弱的。"}
{"wav_id": "82", "speaker": "82", "offset": "475.150", "duration": "9.450", "wav": "82.wav", "translation": "Baidu usually stores its data in MySQL and then syncs its database changes to Elasticsearch.", "transcript": "所以在百度很多业务都是把my把数据先存储到MySQL中，然后再把数据库做的变更同步到Elasticsearch中。"}
{"wav_id": "82", "speaker": "82", "offset": "484.860", "duration": "3.940", "wav": "82.wav", "translation": "The synchronization process can be done with the mature CDC software.", "transcript": "变更的同步过程可以通过现在非常成熟的CDC软件来进行。"}
{"wav_id": "82", "speaker": "82", "offset": "490.420", "duration": "6.520", "wav": "82.wav", "translation": "In this architecture, MySQL can provide transaction mediation or backup schemes.", "transcript": "而在这套架构中，MySQL就变成了做事务仲裁，或者做我们的备份的方案。"}
{"wav_id": "82", "speaker": "82", "offset": "497.070", "duration": "3.800", "wav": "82.wav", "translation": "It may also serve as a de-escalation scheme when Elasticsearch crashes.", "transcript": "以及我们Elasticsearch崩掉的时候，做一种降级的方案。"}
{"wav_id": "82", "speaker": "82", "offset": "503.490", "duration": "2.590", "wav": "82.wav", "translation": "The third usage scenario is tag analysis.", "transcript": "第三种使用场景就是做标签的分析。"}
{"wav_id": "82", "speaker": "82", "offset": "506.840", "duration": "4.630", "wav": "82.wav", "translation": "At present, user persona technology is very popular.", "transcript": "在现目前的互联网，用户画像技术是非常火的一项技术。"}
{"wav_id": "82", "speaker": "82", "offset": "512.390", "duration": "8.080", "wav": "82.wav", "translation": "We attach many labels to users in their persona, such as “Beijing”, “male”, “with an apartment” or “he works in the IT industry”.", "transcript": "我们在用户画像中为每一个人都打量大量的标签，比如说北京、男性、有房，他的职业是IT。"}
{"wav_id": "82", "speaker": "82", "offset": "520.890", "duration": "13.850", "wav": "82.wav", "translation": "Where there are many labels—say scores, hundreds or even thousands of them—based on which persons  must be retrieved, the retrieval ability of traditional database is very weak.", "transcript": "那么当标签数量非常非常多，比如几十个、上百个，甚至上千个的时候，我们根据这些标签要检索出符合这类标签的人的时候，传统的数据库是非常无力的。"}
{"wav_id": "82", "speaker": "82", "offset": "535.250", "duration": "4.300", "wav": "82.wav", "translation": "Elasticsearch stores all labels as a set.", "transcript": "而在用Elasticsearch之后，我们可以把所有的标签存成一个集合。"}
{"wav_id": "82", "speaker": "82", "offset": "539.700", "duration": "2.750", "wav": "82.wav", "translation": "You can search the set.", "transcript": "然后我们在查询的时候对这个集合进行查询。"}
{"wav_id": "82", "speaker": "82", "offset": "542.810", "duration": "14.140", "wav": "82.wav", "translation": "For example, if we search three labels: male, IT and Beijing, we can set conditions that people must meet three or part of the labels.", "transcript": "即我们只要查询比如说标签中含有男性、IT、北京这三个标签的，我们可以指定条件是这三个标签全部有，或者说满足其中任何一个都来返回这样的人的信息。"}
{"wav_id": "82", "speaker": "82", "offset": "558.850", "duration": "3.780", "wav": "82.wav", "translation": "I would also like to talk about the improvement of Elasticsearch by Baidu.", "transcript": "最后一部分我想介绍一下百度对Elasticsearch的改进。"}
{"wav_id": "82", "speaker": "82", "offset": "564.300", "duration": "7.850", "wav": "82.wav", "translation": "While using Elasticsearch, we encountered two main problems, design and the lack of function.", "transcript": "在我们使用Elasticsearch的过程中，我们主要遇到了两类问题，第一类是设计的问题，第二类是功能缺失的问题。"}
{"wav_id": "82", "speaker": "82", "offset": "572.530", "duration": "1.780", "wav": "82.wav", "translation": "There are three aspects of the design problem.", "transcript": "设计问题呢主要有三个。"}
{"wav_id": "82", "speaker": "82", "offset": "574.520", "duration": "4.080", "wav": "82.wav", "translation": "First of all, the metadata is unreliable, causing split-brain sometimes.", "transcript": "第一个是元数据不可靠，会发生脑裂的现象。"}
{"wav_id": "82", "speaker": "82", "offset": "579.090", "duration": "6.900", "wav": "82.wav", "translation": "Maybe the possible community is on E and Elasticsearch GitHub, and Many people in the open source community have reported this problem.", "transcript": "这个可能社区在E 以及Elasticsearch的GitHub上，可能大家都很多有很多开源社区的人不断在反馈。"}
{"wav_id": "82", "speaker": "82", "offset": "587.600", "duration": "3.050", "wav": "82.wav", "translation": "The second aspect is that multiple copies of data are inconsistent, often resulting in data loss.", "transcript": "第二个是数据多副本不一致，经常导致数据丢失。"}
{"wav_id": "82", "speaker": "82", "offset": "590.870", "duration": "1.910", "wav": "82.wav", "translation": "The third part is that the query language is too complex.", "transcript": "第三个是查询语言过于复杂。"}
{"wav_id": "82", "speaker": "82", "offset": "593.280", "duration": "5.970", "wav": "82.wav", "translation": "Elasticsearch provides json as a query language that is still complex to many database practitioners.", "transcript": "Elasticsearch提供的json这种查询语言，对很多我们的数据库从业人员来说还是比较复杂的。"}
{"wav_id": "82", "speaker": "82", "offset": "599.550", "duration": "7.540", "wav": "82.wav", "translation": "In the PPT example, if you only want to query for sum such as aggregation in PPT.", "transcript": "比如说在PPT的举的例子中，我们仅仅想查询一个aggregation 这样的sum的这样的一个查询。"}
{"wav_id": "82", "speaker": "82", "offset": "607.290", "duration": "3.210", "wav": "82.wav", "translation": "Elasticsearch needs to write a very large json query.", "transcript": "Elasticsearch需要写这么非常大的一个json的查询。"}
{"wav_id": "82", "speaker": "82", "offset": "611.760", "duration": "5.240", "wav": "82.wav", "translation": "You may always need to look up the manual when using Elasticsearch.", "transcript": "所以我们在使用Elasticsearch中经常遇到一个问题，就是经常需要查手册。"}
{"wav_id": "82", "speaker": "82", "offset": "618.350", "duration": "2.490", "wav": "82.wav", "translation": "Lack of function relates to permission management.", "transcript": "功能缺失的问题主要是指像权限管理。"}
{"wav_id": "82", "speaker": "82", "offset": "620.850", "duration": "8.330", "wav": "82.wav", "translation": "As Elasticsearch has no management permission, there is a lot of Elasticsearch data stolen in the previous stage.", "transcript": "Elasticsearch是没有权限的，所以在前阶段中啊互联网上有很多Elasticsearch的数据被偷走，都是由它没有权限管理。"}
{"wav_id": "82", "speaker": "82", "offset": "629.680", "duration": "4.270", "wav": "82.wav", "translation": "Later there are It does not support Online Schema Change.", "transcript": "后续还会有像它也缺失，像没有Online Schema Change。"}
{"wav_id": "82", "speaker": "82", "offset": "634.170", "duration": "4.540", "wav": "82.wav", "translation": "If a field does not have an index at first, it cannot be built again later.", "transcript": "比如说一个字段，如果你当时没有建索引，那么以后就不可以再建索引了。"}
{"wav_id": "82", "speaker": "82", "offset": "639.090", "duration": "2.270", "wav": "82.wav", "translation": "It also has no multi-tenant management function.", "transcript": "以及没有多租户管理等功能。"}
{"wav_id": "82", "speaker": "82", "offset": "642.440", "duration": "2.080", "wav": "82.wav", "translation": "Here are some examples showing the improvement.", "transcript": "下面我只举几个例子，我们对它改进。"}
{"wav_id": "82", "speaker": "82", "offset": "644.880", "duration": "1.200", "wav": "82.wav", "translation": "The first is split-brain.", "transcript": "首先是脑裂的问题。"}
{"wav_id": "82", "speaker": "82", "offset": "646.350", "duration": "7.300", "wav": "82.wav", "translation": "We have thought about it for a long time and finally decided to introduce Distributed Log as a log solution.", "transcript": "对于脑裂的问题，我们思考了好久，最终我们引入了Distribu Distributed Log这样的一个日志解决方案。"}
{"wav_id": "82", "speaker": "82", "offset": "654.760", "duration": "7.270", "wav": "82.wav", "translation": "In this solution, all changes in Elasticsearch Master are written to the Distributed Log as a Log.", "transcript": "在这套解决方案中，Elasticsearch中的Master的所有的变更都以日志的方式写入Distributed Log。"}
{"wav_id": "82", "speaker": "82", "offset": "662.460", "duration": "10.640", "wav": "82.wav", "translation": "Each Data Node, along with the other Master nodes, gets the changes from the Distributed Log and writes them locally.", "transcript": "然后各个Data Node以及其他的Master Node都从D Distributed Log中来获得这个日志的变更，然后再把日志的变更写到本地。"}
{"wav_id": "82", "speaker": "82", "offset": "673.300", "duration": "6.270", "wav": "82.wav", "translation": "In this way, the metadata seen by each node can be guaranteed to be the same without split-brain.", "transcript": "这样的话就能够保证各个节点看到的元数据一定是一样的，就不会发生脑裂的问题。"}
{"wav_id": "82", "speaker": "82", "offset": "681.060", "duration": "3.940", "wav": "82.wav", "translation": "The second is the complexity of json query language.", "transcript": "第二个是关于json的查询语言太过于复杂的问题。"}
{"wav_id": "82", "speaker": "82", "offset": "686.340", "duration": "9.560", "wav": "82.wav", "translation": "We directly introduced a distributed SQL query layer and added support for the MySQL connection protocol on top of it.", "transcript": "对于这个问题，我们是直接引入了一个分布式的SQL查询层，然后在分布的SQL查询层之上，我们又增加了对于MySQL连接协议的支持。"}
{"wav_id": "82", "speaker": "82", "offset": "696.380", "duration": "6.800", "wav": "82.wav", "translation": "Elasticsearch users can easily send SQL queries via MySQL Client.", "transcript": "所以呢我们的Elasticsearch用户可以直接通过MySQL的客户端来发送SQL的查询。"}
{"wav_id": "82", "speaker": "82", "offset": "703.510", "duration": "6.910", "wav": "82.wav", "translation": "At the same time, we also added some functions in the SQL layer, so that users can directly use MySQL Client to send HTTP queries.", "transcript": "同时我们还增在SQL层之上增加了一些功能，方便用户直接在MySQL客户端也可以发HTTP的查询。"}
{"wav_id": "82", "speaker": "82", "offset": "711.200", "duration": "12.950", "wav": "82.wav", "translation": "As for the original HTTP query method, users can also send SQL directly over HTTP and get the result in json, which is very convenient.", "transcript": "同时对于原有的HTTP的查询方式，我们也兼容在HTTP直接发送SQL，然后以json的方式来返回结果这种查询方式，所以用户使用起来还是非常方便的。"}
{"wav_id": "82", "speaker": "82", "offset": "724.500", "duration": "3.930", "wav": "82.wav", "translation": "For permission management, we have made some transformation.", "transcript": "对于权限管理，我们把Elasticsearch做了一些改造。"}
{"wav_id": "82", "speaker": "82", "offset": "728.660", "duration": "5.080", "wav": "82.wav", "translation": "We think each Index name in Elasticsearch is composed of two parts.", "transcript": "对于E Elasticsearch中的每一个Index，它的名字我们都都认为由两部分组成。"}
{"wav_id": "82", "speaker": "82", "offset": "734.020", "duration": "3.110", "wav": "82.wav", "translation": "The name of Database and the name of Table.", "transcript": "一部分是它的Database的名字，另一部分是Table的名字。"}
{"wav_id": "82", "speaker": "82", "offset": "737.560", "duration": "3.530", "wav": "82.wav", "translation": "Users can authorize databases and tables, respectively.", "transcript": "用户可以分别针对Database和Table进行授权。"}
{"wav_id": "82", "speaker": "82", "offset": "741.580", "duration": "7.970", "wav": "82.wav", "translation": "For example, if you're creating a USER, you can just write CREATE USER IDENTIFIED in our SQL.", "transcript": "举个例子，假如说我们要创建一个用户，然后我们只要在我们的SQL里写CREATE USER IDENTIFIED这样的SQL命令就可以。"}
{"wav_id": "82", "speaker": "82", "offset": "750.020", "duration": "4.160", "wav": "82.wav", "translation": "To authorize DB, we need to GRANT a permission name.", "transcript": "然后对DB授权,我们就要Grant一个权限的名字。"}
{"wav_id": "82", "speaker": "82", "offset": "754.220", "duration": "5.480", "wav": "82.wav", "translation": "For example, READ_WRITE or READ_ONLY, ON the database TO a user name.", "transcript": "比如说是READ_WRITE还是READ_ONLY，ON一个DATABASE TO USER 名 USER NAME就可以了。"}
{"wav_id": "82", "speaker": "82", "offset": "760.500", "duration": "4.480", "wav": "82.wav", "translation": "Elasticsearch's architecture is very clear after the transformation.", "transcript": "所以呢在我们改造之后，整个Elasticsearch的架构是非常清晰的。"}
{"wav_id": "82", "speaker": "82", "offset": "765.280", "duration": "7.210", "wav": "82.wav", "translation": "Both the metadata and data are synchronized via the Distributed Log.", "transcript": "即元数据通过Distributed Log来同步，实际上数据也是通过Distributed Log来同步的。"}
{"wav_id": "82", "speaker": "82", "offset": "773.330", "duration": "11.050", "wav": "82.wav", "translation": "Users can access Elasticsearch service via MySQL Client, HTTP Client or the traditional JDBC.", "transcript": "然后用户呢上层呢可以通过MySQL Client,也可以通过HTTP Client,也可以通过传统的JDBC的方式来访问Elasticsearch服务。"}
{"wav_id": "82", "speaker": "82", "offset": "786.310", "duration": "2.020", "wav": "82.wav", "translation": "That is all for today.", "transcript": "今天我给大家的介绍就到这里。"}
{"wav_id": "82", "speaker": "82", "offset": "788.460", "duration": "0.630", "wav": "82.wav", "translation": "Thank you!", "transcript": "谢谢大家!"}
